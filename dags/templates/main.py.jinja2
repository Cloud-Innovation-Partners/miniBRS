#   vf_leap
#   Copyright (c)Cloud Innovation Partners 2020.
#   Author : Shahbaz Ali

from airflow import DAG
from airflow.operators.dummy_operator import DummyOperator
from airflow.operators.python_operator import PythonOperator, BranchPythonOperator
from plugins.vf_leap.operators.servicenow_to_s3_transfer_operator import ServiceNowToS3TransferOperator
from plugins.vf_leap.operators.servicenow_to_sftp_transfer_operator import ServiceNowToSFTPTransferOperator

from plugins.vf_leap.utils.servicenow import fetch_servicenow_record_count, on_failure
from datetime import datetime,timedelta


import airflow.settings
from airflow.models import DagModel



{%block dag%}


dag = DAG(
dag_id=str({{ "'"~data.dag_id|string~"'" }}).replace(' ','_').replace('.','_Dot_').replace('-','_Dash_'),
        schedule_interval={{"'@"~data.frequency~"'"}},
        catchup=False,
        default_args={
            'owner': 'BRS',
            'depends_on_past': False,
            'start_date': datetime(2020,2,24,0,0),
            'retries': 1,
            'retry_delay': timedelta(minutes=1)
        },
        params={
            'execution_date' : {% raw %}'{{ execution_date }}'{% endraw %}
        }
)

table_name = {{"'"~data.dag_id~"'"}}

{% endblock %}


start = DummyOperator(task_id='start',dag=dag)
end = DummyOperator(task_id='end',dag=dag,trigger_rule='none_failed')
record_count = BranchPythonOperator(task_id='fetch_record_count',python_callable=fetch_servicenow_record_count,dag=dag,op_kwargs={'table_name': table_name,'execution_date':dag.params.get('execution_date')},on_failure_callback=on_failure)
count_less_than_threshold = DummyOperator(task_id='count_within_threshold',dag=dag)
count_exceeds_threshold = DummyOperator(task_id='count_exceeds_threshold',dag=dag)
count_equals_zero = DummyOperator(task_id='count_is_zero',dag=dag)
submission = ServiceNowToSFTPTransferOperator(task_id='send_data_to_submission',dag=dag,snow_id ='snow_id',config = 'config',sftp_conn_id = 'sftp_global',table = table_name,execution_date=dag.params.get('execution_date'),on_failure_callback=on_failure)


start>>record_count>>[count_less_than_threshold,count_exceeds_threshold,count_equals_zero]
count_less_than_threshold >> submission >> end
end <<[count_exceeds_threshold,count_equals_zero]

{% block unpause%}
session = airflow.settings.Session()
try:
    qry = session.query(DagModel).filter(DagModel.dag_id == dag.dag_id)
    d = qry.first()
    d.is_paused = False
    session.commit()
except:
    session.rollback()
finally:
    session.close()
{% endblock %}


