#   vf_leap
#   Copyright (c)Cloud Innovation Partners 2020.
#   Author : Shahbaz Ali

from plugins.vf_leap.utils.dates import cron_presets
from airflow import DAG
from airflow.operators.dummy_operator import DummyOperator
from airflow.operators.python_operator import PythonOperator, BranchPythonOperator
from plugins.vf_leap.utils.servicenow import fetch_servicenow_record_count, on_failure,clean_up
from datetime import datetime,timedelta
import airflow.settings
from airflow.models import DagModel

{% if data.storage_type == 'sftp' %}
from plugins.vf_leap.operators.servicenow_to_sftp_transfer_operator import ServiceNowToSFTPTransferOperator
{% elif data.storage_type == 's3' %}
from plugins.vf_leap.operators.servicenow_to_s3_transfer_operator import ServiceNowToS3TransferOperator
{% elif data.storage_type == 'dropbox' %}
from plugins.vf_leap.operators.servicenow_to_dropbox_transfer_operator import ServiceNowToDropboxTransferOperator
{% endif %}

{%block dag%}
table_name = {{"'"~data.dag_id~"'"}}
execution_date = {{"'"~data.execution_date~"'"}}
clean_up_param = {{ "'"~data.execution_date|string+'$'+data.dag_id|string~"'"}}

dag = DAG(
dag_id=str({{ "'"~'r_'+data.dag_id|string~"'" }}'_'+execution_date).replace(' ','_').replace('.','').replace('-','').replace('+','').replace(':',''),
        schedule_interval={{"'@once'"}},
        catchup=False,
        default_args={
            'owner': 'BRS',
            'depends_on_past': False,
            'start_date': datetime(2020,2,24,0,0),
            'retries': 1,
            'retry_delay': timedelta(minutes=1)
        }

)
start = DummyOperator(task_id='start',dag=dag)
end = PythonOperator(task_id='end',dag=dag,python_callable=clean_up,op_kwargs={'variable_key': clean_up_param},trigger_rule='none_failed')
record_count = BranchPythonOperator(task_id='fetch_record_count',python_callable=fetch_servicenow_record_count,dag=dag,op_kwargs={'table_name': table_name,'execution_date':execution_date},on_failure_callback=on_failure)
count_less_than_threshold = DummyOperator(task_id='count_within_threshold',dag=dag)
count_exceeds_threshold = DummyOperator(task_id='count_exceeds_threshold',dag=dag)
count_equals_zero = DummyOperator(task_id='count_is_zero',dag=dag)

{% if data.storage_type == 'sftp' %}
submission = ServiceNowToSFTPTransferOperator(task_id='send_data_to_submission',dag=dag,snow_id ='servicenow_default',config = 'config',storage_conn_id = 'sftp_default',table = table_name,execution_date=execution_date,on_failure_callback=on_failure)
{% elif data.storage_type == 's3' %}
submission = ServiceNowToS3TransferOperator(task_id='send_data_to_submission',dag=dag,snow_id ='servicenow_default',config = 'config',storage_conn_id = 's3_default',table = table_name,execution_date=execution_date,on_failure_callback=on_failure)

{% elif data.storage_type == 'dropbox' %}
submission = ServiceNowToDropboxTransferOperator(task_id='send_data_to_submission',dag=dag,snow_id ='servicenow_default',config = 'config',storage_conn_id = 'dropbox_default',table = table_name,execution_date=execution_date,on_failure_callback=on_failure)
{% endif %}


{% endblock %}


start>>record_count>>[count_less_than_threshold,count_exceeds_threshold,count_equals_zero]
count_less_than_threshold >> submission >> end
end <<[count_exceeds_threshold,count_equals_zero]

{% block unpause%}
session = airflow.settings.Session()
try:
    qry = session.query(DagModel).filter(DagModel.dag_id == dag.dag_id)
    d = qry.first()
    d.is_paused = False
    session.commit()
except:
    session.rollback()
finally:
    session.close()
{% endblock %}


